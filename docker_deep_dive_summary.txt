ch.4
    1. Can think of images as "class", container as "instance". Surely they are not the same
    2. inspect container shell with docker run -it
    3. git pull a directory, build an image and run it as container. pretty cool.

ch.5 the docker engine
    high-level view:
    1. daemon : used to be a bulk of what "docker" is, continously being refactor and modularized.
    REST API, authentication, orchestration, security, core networkingmodulized

    2. containerd: manage container lifecycle operations - start|stop|pause|rm,
    but it also involve in image push / pull overtime.
    3. runc - single purpose: create containers

    Now that all essential container function is pulled out from daemon,
    it is possible to upgrade docker daemon version without stopping
    any container.

    rest of the chapter is just setting up key-pairs security stuff, skipped.

ch.6 docker image
    - docker images is small and fast because only necessary component is in the image.
    - it is build with layer, say layer for OS, a layer for python, and a layer for source code.
    - linux images tend to be a lot smaller than windows operations
    - command; docker images ls/rm/pull/push

ch.7 docker container
    - it is best practice to docker stop > docker rm, then docker rm -f. So the container can stop cleanly.
    - data is not stored in the container, instead it is store in host with docker volume. Data will not be loss
    by stopping container, but rm it.
    - restart policy:
        a. always: always restart unless explicity stopped
        b. unless-stopped.  smae as always, but will not restart when daemon restarts.
        c. on -failure: restart if container exist with non-zero exit code

ch.8 Containerizing an app
    - Dockerfile: starting point, tell docker how to build an image
        INSTRUCTION names are not case sensitive, but should be in UPPERCASE as best practice.
            1. instruction that create new layer. i.e. FROM, RUN, COPY: adding content su as files / programs
            2. adding metadata only: adding instructions on how to run the application
    - Docker image build
    - Docker login and push to dockerhub, each image must be tagged to be pushed.
    - docker image smaller the better, big image is hard to build and maintain, also provide more surface for attack.
    - it is a best practice to include multiple commands as part ofa a RUn isntruction (using && and \)
    - Multistage build: single docker file with multiple "FROM"

    best practices:
        1. docker can reuse cached layer for build. But when it comes to step that is a "cache miss", all the rest of the command in
        Dockerfile will be build as new. So try to put variable section at the back of the Dockerfile.
        2. Squash image comes with pro and con. Pro is there is less layer images to work on. But Cons is squashed image won't be able to share layers with others,
        hence size is larger.
    command:
        1. docker image history <image:tag>: show how many layer are built
    